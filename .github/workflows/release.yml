name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true

      - name: Extract version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Set version environment variable
        run: echo "VERSION=v${{ steps.get_version.outputs.version }}" >> $GITHUB_ENV

      - name: Run tests
        run: go test -v ./...

  build-binaries:
    name: Build Binaries
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
            extension: .exe
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true

      - name: Build binary
        run: |
          mkdir -p build
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build \
            -ldflags="-w -s -X 'orisun/common.Version=${{ env.VERSION }}' -X 'orisun/common.BuildTime=$(date -u +'%Y-%m-%dT%H:%M:%SZ')' -X 'orisun/common.GitCommit=${GITHUB_SHA::8}'" \
            -o build/orisun-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.extension || '' }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: orisun-${{ matrix.os }}-${{ matrix.arch }}
          path: build/orisun-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.extension || '' }}
          if-no-files-found: error



  create-release:
    name: Create GitHub Release
    needs: [validate, build-binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "changelog=Initial release" >> $GITHUB_OUTPUT
          else
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ needs.validate.outputs.version }}
          body: |
            ## Orisun v${{ needs.validate.outputs.version }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ### Linux
            ```bash
            # For amd64
            curl -L https://github.com/oexza/Orisun/releases/download/v${{ needs.validate.outputs.version }}/orisun-linux-amd64 -o orisun
            chmod +x orisun
            
            # For arm64
            curl -L https://github.com/oexza/Orisun/releases/download/v${{ needs.validate.outputs.version }}/orisun-linux-arm64 -o orisun
            chmod +x orisun
            ```
            
            ### macOS
            ```bash
            # For amd64
            curl -L https://github.com/oexza/Orisun/releases/download/v${{ needs.validate.outputs.version }}/orisun-darwin-amd64 -o orisun
            chmod +x orisun
            
            # For arm64 (Apple Silicon)
            curl -L https://github.com/oexza/Orisun/releases/download/v${{ needs.validate.outputs.version }}/orisun-darwin-arm64 -o orisun
            chmod +x orisun
            ```
            
            ### Windows
            Download the appropriate binary from the assets below.
          files: |
            artifacts/**/*
          draft: false
          prerelease: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # Note: You must add DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets in your GitHub repository settings

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ needs.validate.outputs.version }}
            BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            GIT_COMMIT=${GITHUB_SHA::8}
          tags: |
            ghcr.io/oexza/orisun:latest
            ghcr.io/oexza/orisun:${{ needs.validate.outputs.version }}
            orexza/orisun:latest
            orexza/orisun:${{ needs.validate.outputs.version }}