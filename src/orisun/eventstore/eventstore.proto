syntax = "proto3";

package eventstore;

option go_package = "orisun/eventstore";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

message Position {
  uint64 commit_position = 1;
  uint64 prepare_position = 2;
}

message Tag {
  string key = 1;
  string value = 2;
}

message Criterion {
  repeated Tag tags = 1;
}

message Query {
  repeated Criterion criteria = 1;
}

message EventToSave {
  string event_id = 1;
  string event_type = 2;
  string data = 3;
  string metadata = 4;
  repeated Tag tags = 5;
}

message Event {
  string event_id = 1;
  string event_type = 2;
  string data = 3;
  string metadata = 4;
  repeated Tag tags = 5;
  Position position = 6;
  google.protobuf.Timestamp date_created = 7;
  string stream_id = 8;
  string version = 9;
}

message WriteResult {
  Position log_position = 1;
}

enum Direction {
  ASC = 0;
  DESC = 1;
}

message IndexLockCondition {
  Position consistency_marker = 1;
  Query query = 2;
}

message SaveStreamQuery{
  string name = 1;
  uint32 expected_version = 2;
  Query subsetQuery = 3;
}

message SaveEventsRequest {
  IndexLockCondition consistency_condition = 1;
  string boundary = 2;
  SaveStreamQuery
 stream = 3;
  repeated EventToSave events = 4;
}

message GetStreamQuery{
  string name = 1;
  uint32 from_version = 2;
  Query subsetQuery = 3;
}

message GetEventsRequest {
  Query query = 1;
  Position from_position = 2;
  int32 count = 3;
  Direction direction = 4;
  string boundary = 5;
  SaveStreamQuery stream = 6;
}

message GetEventsResponse {
  repeated Event events = 1;
}

message CatchUpSubscribeToEventStoreRequest {
  Position position = 1;
  Query query = 2;
  string subscriber_name = 3;
  string boundary = 4;
}

message PublishRequest {
  string id = 1;
  string subject = 2;
  bytes data = 3;
}

message SubscribeRequest {
  string subject = 1;
  string consumer_name = 2;
}

message SubscribeResponse {
  Message message = 1;
}

message Message {
  string id = 1;
  string subject = 2;
  bytes data = 3;
}

message AckRequest {
  string ack_id = 1;
}

service EventStore {
  rpc SaveEvents(SaveEventsRequest) returns (WriteResult) {}
  rpc GetEvents(GetEventsRequest) returns (GetEventsResponse) {}
  rpc CatchUpSubscribeToEvents(CatchUpSubscribeToEventStoreRequest) returns (stream Event) {}
  rpc PublishToPubSub(PublishRequest) returns (google.protobuf.Empty) {}
  rpc SubscribeToPubSub(SubscribeRequest) returns (stream SubscribeResponse) {}
}